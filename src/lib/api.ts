import axios from "axios";
import { API_ENDPOINTS } from "../constants/system";
import { tokenService } from "../services/tokenService";

const BASE_URL = import.meta.env.VITE_API_BASE_URL || "https://fav-13.ru";

const api = axios.create({
  baseURL: BASE_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

// üîÅ –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤: –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π access token –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
api.interceptors.request.use(
  async (config) => {
    const token = await tokenService.getAccessToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// üîÅ –ü–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤: –ø—Ä–∏ 401 –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      try {
        const newAccessToken = await refreshToken();
        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
        return api(originalRequest);
      } catch (refreshError) {
        console.error("[Token refresh failed]", refreshError);
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

export default api;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
export const refreshToken = async (): Promise<string> => {
  const refresh_token = await tokenService.getRefreshToken();
  const res = await api.post(API_ENDPOINTS.REFRESH_TOKEN, {
    refresh: refresh_token,
  });
  const { access: access_token, refresh: new_refresh_token } = res.data;
  await tokenService.saveTokens(access_token, new_refresh_token);
  return access_token;
};

// –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–µ–±–∞–≥ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫ –Ω–∏–∂–µ:
// if (process.env.NODE_ENV === "development") {
//   api.interceptors.request.use(
//     (config) => {
//       console.log("=== OUTGOING REQUEST ===");
//       console.log("baseURL:", config.baseURL);
//       console.log("url:", config.url);
//       console.log("Method:", config.method);
//       console.log("Headers:", config.headers);
//       console.log("Data:", config.data);
//       console.log("Params:", config.params);
//       return config;
//     },
//     (error) => {
//       console.error("REQUEST ERROR:", error);
//       return Promise.reject(error);
//     }
//   );
// }
